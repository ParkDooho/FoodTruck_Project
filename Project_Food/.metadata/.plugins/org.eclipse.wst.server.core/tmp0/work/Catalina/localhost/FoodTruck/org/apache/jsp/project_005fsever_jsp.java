/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2018-09-30 13:09:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.OutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.sql.*;
import Project_Sever.*;
import org.json.simple.*;
import java.net.URLEncoder;
import java.net.URLDecoder;

public final class project_005fsever_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("org.json.simple");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("Project_Sever");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.OutputStream");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.io.BufferedInputStream");
    _jspx_imports_classes.add("org.json.simple.JSONObject");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("org.json.simple.JSONArray");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

   request.setCharacterEncoding("UTF-8");

      out.write("\r\n");
      out.write("\r\n");

   Connection con = DBConnection.openConnection();
   UserDAO U_DB = new UserDAO(con);
   JSONObject jsonObj = new JSONObject();
   JSONArray jsonArr = new JSONArray();
   String action = request.getParameter("action");
   String result="";
   String userID, userPW, userName, userTel, userNum, shopID, shopPW, shopName, shopTel, shopOwner, shopMenu, shopEvent, shopPic,shopOpenPlace,shopOpenTime;
   int shopPrice=0;
   //좌표관련 함수
   double userAddr_x=0,userAddr_y=0,shopAddr_x=0, shopAddr_y=0;
   //이미지관련 함수
   String fileName;
   
      
      
   
   switch (action) {
   case "userLog":
      userID = request.getParameter("userID");
      userPW = request.getParameter("userPW");
      jsonObj = U_DB.userLog(userID, userPW);
      out.println(jsonObj.toJSONString());
      break;
   case "userCheck":
	      userID = request.getParameter("userID");
	      jsonObj = U_DB.userCheck(userID);
	      out.println(jsonObj.toJSONString());
	      break;
   case "userInsert":      
      userID = request.getParameter("userID");
      userPW = request.getParameter("userPW");
      userName = request.getParameter("userName");
      userTel = request.getParameter("userTel");
      userNum = request.getParameter("userNum");
      U_DB.userInsert(userID, userPW, userName, userTel, userNum);
      break;
   case "shopLog":
      shopID = request.getParameter("shopID");
      shopPW = request.getParameter("shopPW");
      jsonObj = U_DB.shopLog(shopID,shopPW);
      out.println(jsonObj.toJSONString());
      break;
   case "shopCheck":
	      shopID = request.getParameter("shopID");
	      jsonObj = U_DB.shopCheck(shopID);
	      out.println(jsonObj.toJSONString());
	      break;
   case "shopInsert":
      shopID = request.getParameter("shopID");
      shopPW = request.getParameter("shopPW");
      shopName = request.getParameter("shopName");
      shopTel = request.getParameter("shopTel");
      shopOwner = request.getParameter("shopOwner");
      U_DB.shopInsert(shopID,shopPW,shopName,shopTel,shopOwner);
      break;
   case "selectData_text_Menu":
         shopMenu = request.getParameter("shopMenu");
         jsonObj = U_DB.selectData_text_Menu(shopMenu);
         out.println(jsonObj.toJSONString());
         break;
   case "selectData_text_Name":
         shopName = request.getParameter("shopName");
         jsonObj = U_DB.selectData_text_Name(shopName);
         out.println(jsonObj.toJSONString());
         break;
   case "shop_Information":
	   shopID = request.getParameter("shopID");
       jsonObj = U_DB.shop_Information(shopID);
       out.println(jsonObj.toJSONString());
       break;
   case "shop_OpenSelect":
	   shopID = request.getParameter("shopID");
       jsonObj = U_DB.shop_OpenSelect(shopID);
       out.println(jsonObj.toJSONString());
	   break;
   case "shop_OpenUpdate":
	   shopOpenTime = request.getParameter("shopOpenTime");
	   shopOpenPlace = request.getParameter("shopOpenPlace");
	   shopID = request.getParameter("shopID");
	   U_DB.shop_OpenUpdate(shopOpenTime, shopOpenPlace, shopID);
	   break;
   case "shop_MenuSelect":
	   shopID = request.getParameter("shopID");
	   shopMenu = request.getParameter("shopMenu");
       jsonObj = U_DB.shop_MenuSelect(shopID,shopMenu);
       out.println(jsonObj.toJSONString());
	   break;
   case "insertData_text":
      shopID = request.getParameter("shopID");
      shopName = request.getParameter("shopName");
      shopMenu = request.getParameter("shopMenu");
      shopPrice = Integer.parseInt(request.getParameter("shopPrice"));
      shopEvent = request.getParameter("shopEvent");
      U_DB.insertData_text(shopID, shopName, shopMenu, shopPrice, shopEvent);
      break;    
   case "deleteData_text":
	      shopID = request.getParameter("shopID");
	      shopMenu = request.getParameter("shopMenu");;
	      U_DB.deleteData_text(shopID,shopMenu);
	      break;      
   case "select_Menu":
	   shopID = request.getParameter("shopID");
	   jsonObj = U_DB.select_Menu(shopID);
       out.println(jsonObj.toJSONString());
	   break;
   case "insertShop_GPS":
      shopID = request.getParameter("shopID");
      if(request.getParameter("shopAddr_x")!=null && request.getParameter("shopAddr_x")!="") {
      	shopAddr_x = Double.parseDouble(request.getParameter("shopAddr_x"));}
      if(request.getParameter("shopAddr_y")!=null && request.getParameter("shopAddr_y")!="") {
      	shopAddr_y = Double.parseDouble(request.getParameter("shopAddr_y"));}
      U_DB.insertShop_GPS(shopID,shopAddr_x ,shopAddr_y);
      break;
   case "selectShop_GPS":
	   if(request.getParameter("userAddr_x")!=null && request.getParameter("userAddr_x")!="") {
		userAddr_x = Double.parseDouble(request.getParameter("userAddr_x"));}
	   if(request.getParameter("userAddr_y")!=null && request.getParameter("userAddr_y")!="") {
		userAddr_y = Double.parseDouble(request.getParameter("userAddr_y"));}
	   jsonObj = U_DB.selectShop_GPS(userAddr_x,userAddr_y);
	   out.println(jsonObj.toJSONString());
	  break;
   case "deleteShop_GPS":
      shopID = request.getParameter("shopID");
      U_DB.deleteShop_GPS(shopID);
      break;
   case "insertShop_Image":
      shopID = request.getParameter("shopID");
      U_DB.deleteShop_ImageData(shopID);
      String dir ="C:/Project_Food/FoodTruck/WebContent/Image";
      int max = 5*1024*1024; //16MB

      try {
         MultipartRequest m = new MultipartRequest(request, dir, max); // 클라이언트에서 보낸 사진을 받는 부분입니다.   
         Enumeration files = m.getFileNames();

         //파일 정보가 있다면
         if(files.hasMoreElements()) {
         String name = (String)files.nextElement();
         fileName = m.getFilesystemName(name);
         System.out.println("이미지를 저장하였습니다. : " + fileName);
         shopPic =fileName;
         U_DB.insertShop_Image(shopID,shopPic);
         }              
                
         } catch (IOException e) {
            out.println("안드로이드 부터 이미지를 받아옵니다.");
         }
      break;
   case "selectShop_ImageData":
      shopID = request.getParameter("shopID");
      jsonObj = U_DB.selectShop_ImageData(shopID);
      out.println(jsonObj.toJSONString());
      break;
   case "selectShop_Image":
	      shopPic = request.getParameter("shopPic");
	      byte[] buffer = new byte[1024];
	      ServletOutputStream o = response.getOutputStream();
	      try{

	            String file = "C:/Project_Food/FoodTruck/WebContent/Image/"+shopPic;
	           BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));
	            int n = 0;
	            while((n=in.read(buffer,0,1024))!=-1){o.write(buffer,0,n);}
	           o.close();
	           in.close();
	      }catch(Exception e){e.printStackTrace();}   
	      break;
   default:
      break;
   }
      
      
      
      
   DBConnection.closeConnection(con);

   

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
